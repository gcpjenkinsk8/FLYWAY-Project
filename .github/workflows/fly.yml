name: 'Flyway GitHub Dev Pipeline'
 
on:
 workflow_dispatch:
      
env:
    SQLFLUFF_DIALECT: mysql
    DOCKER_IMAGE: redgate/flyway
    SCHEMAS: devdb
    SCHEMAS1: proddb
 
jobs:
  Continuous-Integration-Build:
    name: Continuous Integration Build
    runs-on: ubuntu-20.04
 
    steps:
      - name: Checkout
        uses: actions/checkout@v3.0.0
                       
      - name: Info Check
        run: >-
          docker run --rm
          --volume ${{ github.workspace }}/migrations:/flyway/sql:ro
          "${{ env.DOCKER_IMAGE }}"
          -licenseKey="${{ secrets.FLYWAY_LICENSE_KEY }}"
          -url="${{ secrets.DB_BUILD_URL }}"
          -user="${{ secrets.DB_BUILD_USERNAME }}"
          -password="${{ secrets.DB_BUILD_PASSWORD }}"
          info -schemas="${{ env.SCHEMAS }}"
      - name: Flyway Info
        run: >-
          docker run --rm
          --volume ${{ github.workspace }}/migrations:/flyway/sql:ro
          "${{ env.DOCKER_IMAGE }}"
          -licenseKey="${{ secrets.FLYWAY_LICENSE_KEY }}"
          -url="${{ secrets.DB_BUILD_URL }}"
          -user="${{ secrets.DB_BUILD_USERNAME }}"
          -password="${{ secrets.DB_BUILD_PASSWORD }}" 
          info -schemas="${{ env.SCHEMAS }}"
          
  Deploy-Test:
      name: Deploy Test
      needs: Continuous-Integration-Build
      runs-on: ubuntu-20.04
      steps:
      - uses: actions/checkout@v3.0.0
      
      - run: >-    
          docker run --rm
          --volume ${{ github.workspace }}/migrations:/flyway/sql:ro
          "${{ env.DOCKER_IMAGE }}"
          -licenseKey="${{ secrets.FLYWAY_LICENSE_KEY }}"
          -url="${{ secrets.DB_TEST_URL }}"
          -user="${{ secrets.DB_TEST_USERNAME }}"
          -password="${{ secrets.DB_TEST_PASSWORD }}"  
          info -schemas="${{ env.SCHEMAS }}"
      - run: >-
          docker run --rm
          --volume ${{ github.workspace }}/migrations:/flyway/sql:ro
          "${{ env.DOCKER_IMAGE }}"
          -licenseKey="${{ secrets.FLYWAY_LICENSE_KEY }}"
          -url="${{ secrets.DB_TEST_URL }}"
          -user="${{ secrets.DB_TEST_USERNAME }}"
          -password="${{ secrets.DB_TEST_PASSWORD }}"   
          migrate -schemas="${{ env.SCHEMAS }}" -outOfOrder=true -validateOnMigrate=true
      - run: >-
          docker run --rm
          --volume ${{ github.workspace }}/migrations:/flyway/sql:ro
          "${{ env.DOCKER_IMAGE }}"
          -licenseKey="${{ secrets.FLYWAY_LICENSE_KEY }}"
          -url="${{ secrets.DB_TEST_URL }}"
          -user="${{ secrets.DB_TEST_USERNAME }}"
          -password="${{ secrets.DB_TEST_PASSWORD }}"   
          info -schemas="${{ env.SCHEMAS }}"

  Failed-Action:
      name: If Build Failed Action Job
      needs: Deploy-Test
      if: failure()
      runs-on: ubuntu-20.04
      steps:
      - uses: actions/checkout@v3.0.0
      
      - name: Notify Failure
        run: echo "The 'build' job has failed. Taking appropriate action..."
        
      - run: >-
          docker run --rm
          --volume ${{ github.workspace }}/migrations:/flyway/sql:ro
          "${{ env.DOCKER_IMAGE }}"
          -licenseKey="${{ secrets.FLYWAY_LICENSE_KEY }}"
          -url="${{ secrets.DB_TEST_URL }}"
          -user="${{ secrets.DB_TEST_USERNAME }}"
          -password="${{ secrets.DB_TEST_PASSWORD }}"   
          undo -schemas="${{ env.SCHEMAS }}"
      - run: >-
          docker run --rm
          --volume ${{ github.workspace }}/migrations:/flyway/sql:ro
          "${{ env.DOCKER_IMAGE }}"
          -licenseKey="${{ secrets.FLYWAY_LICENSE_KEY }}"
          -url="${{ secrets.DB_TEST_URL }}"
          -user="${{ secrets.DB_TEST_USERNAME }}"
          -password="${{ secrets.DB_TEST_PASSWORD }}"   
          info -schemas="${{ env.SCHEMAS }}"

